#!/bin/bash
#

ET_DIR="`realpath -e $(dirname $0)/..`"

usage ()
{
	printf "\nusage: sandbox <command>\n\n"
	printf "<command>\n"
	printf "\tmake <targets> - Build specified board targets\n"
	printf "\tbuild          - Build all boards\n"
	printf "\tinfo           - Show build variables for all boards\n"
	printf "\tupdate         - Clean and build all boards\n"
	printf "\tversion        - Show version information for all boards\n\n"
}

do_make ()
{
	printf "\n[$1]\n"
	case $2 in
	make)
		args="`echo $@ | cut -d ' ' -f 3-9`"
		ET_BOARD=$1 make $args
		;;
	info | update | version)
		ET_BOARD=$1 make $2
		;;
	build)
		ET_BOARD=$1 make sandbox
		;;
	*)
		;;
	esac
}

is_virtual ()
{
	if [ "`grep -oe 'is virtual' boards/$1/etinker.mk 2> /dev/null`" = "is virtual" ]; then
		return 0
	else
		return 1
	fi
}

# verify first positional argumement
if [ -z "$1" ]; then
	printf "Missing arguments!\n"
	usage
	exit 1
fi

# validate first positional argumement
case $1 in
make)
	if [ -z "2" ]; then
		printf "Missing 'make' arguments!\n"
		usage
		exit 1
	fi
	;;
build | info | update | version)
	;;
*)
	printf "Invalid argument list!\n"
	usage
	exit 1
	;;
esac

# check state of boards directory
for n in `ls boards`; do
	if [ "$n" = "software.conf" ]; then
		continue
	fi

	if ! [ -f boards/$n/etinker.mk ]; then
		printf "'$n' is not a valid etinker board!\n" $n
		exit 1
	fi

	if is_virtual $n; then
		continue
	fi
done

# operate on valid boards
for n in `ls boards`; do
	if [ "$n" = "software.conf" ]; then
		continue
	fi

	if is_virtual $n; then
		continue
	fi

	# baseline boards
	case $n in
	ek-tm4c* | nrf* | aml-s905x-cc | am335x-pocketbeagle | ls1012afrdm | ls1043ardb | omap3-evm | pynq-z2 | sama5d3-xpld)
		case $n in
		ek-tm4c* | nrf*)
			case "$@" in
			*bootloader* | *kernel* | *rootfs* | *overlay*)
				continue
				;;
			*)
				;;
			esac
			;;
		*)
			;;
		esac
		if [ "pynq-z2" == "$n" ]; then
			# Xilinx board requires a generated FPGA project
			if ! [ -d ${ET_DIR}/boards/zynq/fpga/sdk ]; then
				continue
			fi
		fi
		if ! do_make $n "$@"; then
			printf "etinker $0 failed!\n"
			exit 1
		fi
		if [ "pynq-z2" == "$n" ]; then
			# build the Xilinx variant
			export ET_KERNEL_VARIANT="-xlnx"
			export ET_BOOTLOADER_VARIANT="-xlnx"
			if ! do_make $n "$@"; then
				printf "etinker $0 failed!\n"
				exit 1
			fi
			unset ET_KERNEL_VARIANT
			unset ET_BOOTLOADER_VARIANT
		fi
		;;
	*)
		;;
	esac
done
