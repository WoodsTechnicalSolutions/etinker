#!/bin/bash

if ! [ "`id -u`" = "0" ]; then
	printf "***** THIS MUST BE RUN AS 'root' USER *****\n"
	exit 1
fi

function usage()
{
	printf "USAGE: mksdcard <board> <block-device> [tiny]\n"
}

if [ "${1}" = "" ]; then
	printf "***** MISSING BOARD NAME *****\n"
	usage
	exit 1
fi

board=$1

case "${board}" in
	*ls1043ardb*)
		printf "***** LXP Layerscape ARM Cortex-A53 *****\n"
		;;
	*aml-s905x-cc*)
		printf "***** Amlogic ARM Cortex-A53 *****\n"
		;;
	*zynq*)
		printf "***** Xilinx Zynq ARM Cortex-A9 *****\n"
		;;
	*sama5d3*)
		printf "***** SAMA5D3 ARM Cortex-A5 *****\n"
		;;
	*am3517*|*beagle*|*torpedo*|*omap3*|*overo*)
		printf "***** OMAP3 ARM Cortex-A8 *****\n"
		;;
	*)
		printf "***** INVALID BOARD NAME *****\n"
		usage
		exit 1
		;;
esac

if [ "${2}" = "" ]; then
	printf "***** MISSING SDCARD DEVICE PATH *****\n"
	usage
	exit 1
fi

disk=$2

if [ "$3" = "tiny" ]; then
	layout=$3
else
	layout="normal"
fi

controller="unknown"

echo ${disk} | grep -q "/dev/mmcblk"
if [ "$?" = "0" ]; then
	controller=MMC
fi

echo ${disk} | grep -q "/dev/sd"
if [ "$?" = "0" ]; then
	controller=ATA
fi

if [ "${controller}" = "unknown" ]; then
	printf "***** DISK ${disk} IS NOT SUPPORTED *****\n"
	exit 1
fi

if ! [ -b "${disk}" ]; then
	printf "***** DISK ${disk} IS NOT A BLOCK DEVICE *****\n"
	exit 1
fi

mount | grep -q ${disk}
if [ "$?" = "0" ]; then
	printf "***** DISK ${disk} HAS ACTIVE MOUNT POINT *****\n"
	exit 1
fi

printf "[${board}] ALL DATA ON ${disk} WILL BE LOST. Are you sure? (yes or no) : "
read proceed

if ! [ "${proceed}" = "yes" ]; then
	exit 1
fi

for ((i=3; i > 0; i--)); do
	printf "\r[${board}] Starting in %2d ... \t\t[Ctrl-C to abort]" $i
	sleep 1
done

echo

printf "[${board}] Preparing ${controller} @ ${disk}\n"

dd if=/dev/zero of=${disk} bs=1M count=65

parted -a optimal -s ${disk} mklabel msdos

if [ "${layout}" = "tiny" ]; then
	# MINIMUM MEDIA SIZE: 943 MiB
	# +--------------------+------------+----------+----------+----------+
	# | RAW                | (1) FAT 16 | (2) EXT4 | (3) EXT4 | (4) EXT4 |
	# +--------------------+------------+----------+----------+----------+
	# | MBR/GPT + FIRMWARE | BOOT       | rootfs   | backup   | data     |
	# +--------------------+------------+----------+----------+----------+
	# | 68 MiB             | 128 MiB    | 360 MiB  | 360 MiB  | (fill)   |
	# +--------------------+------------+----------+----------+----------+
	#
	# Filesystem 1K-blocks Used Available Use% Mounted on
	# /dev/sdX1  130798       0 130798    0%   /media/<user>/BOOT
	# /dev/sdX2  348805    2062 324215    1%   /media/<user>/rootfs
	# /dev/sdX3  348805    2062 324215    1%   /media/<user>/backup
	# /dev/sdX4   24753     635  22255    3%   /media/<user>/data

	printf "[${board}] Partitioning ${disk} [ 68 MiB RAW / 128 MiB (BOOT) / 360 MiB (rootfs) / 360 MiB (backup) / <fill> (data) ]\n"
	parted -a optimal -s ${disk} mkpart primary fat16 68MiB 196MiB
	parted -a optimal -s ${disk} mkpart primary ext4 196MiB 556MiB
	parted -a optimal -s ${disk} mkpart primary ext4 556MiB 916MiB
	parted -a optimal -s ${disk} mkpart primary ext4 916MiB 100%
else
	# MINIMUM MEDIA SIZE: 16 GiB
	# +--------------------+------------+----------+----------+----------+
	# | RAW                | (1) FAT 16 | (2) EXT4 | (3) EXT4 | (4) EXT4 |
	# +--------------------+------------+----------+----------+----------+
	# | MBR/GPT + FIRMWARE | BOOT       | rootfs   | backup   | data     |
	# +--------------------+------------+----------+----------+----------+
	# | 68 MiB             | 128 MiB    | 2048 MiB | 5120 MiB | (fill)   |
	# +--------------------+------------+----------+----------+----------+
	#
	# Filesystem 1K-blocks Used  Available Use% Mounted on
	# /dev/sdX1   130798       0  130798   0%   /media/<user>/BOOT
	# /dev/sdX2  1998672    6144 1871288   1%   /media/<user>/rootfs
	# /dev/sdX3  5095040   20472 4796040   1%   /media/<user>/backup
	# /dev/sdX4  7929288   35700 7471088   1%   /media/<user>/data

	printf "[${board}] Partitioning ${disk} [ 68 MiB RAW / 128 MiB (BOOT) / 2 GiB (rootfs) / 5 GiB (backup) / <fill> (data) ]\n"
	parted -a optimal -s ${disk} mkpart primary fat16 68MiB 196MiB
	parted -a optimal -s ${disk} mkpart primary ext4 196MiB 2244MiB
	parted -a optimal -s ${disk} mkpart primary ext4 2244MiB 7364MiB
	parted -a optimal -s ${disk} mkpart primary ext4 7364MiB 100%
fi

parted -a optimal -s ${disk} toggle 1 boot

case "${controller}" in
	MMC)
		printf "[${board}] Formatting ${disk}p1 as vfat\n"
		mkfs.vfat -F 16 ${disk}p1 -n BOOT
		printf "[${board}] Formatting ${disk}p2 as ext4\n"
		mkfs.ext4 ${disk}p2 -F -L rootfs
		printf "[${board}] Formatting ${disk}p3 as ext4\n"
		mkfs.ext4 ${disk}p3 -F -L backup
		printf "[${board}] Formatting ${disk}p4 as ext4\n"
		mkfs.ext4 ${disk}p4 -F -L data
		;;
	ATA)
		printf "[${board}] Formatting ${disk}1 as vfat\n"
		mkfs.vfat -F 16 ${disk}1 -n BOOT
		printf "[${board}] Formatting ${disk}2 as ext4\n"
		mkfs.ext4 ${disk}2 -F -L rootfs
		printf "[${board}] Formatting ${disk}3 as ext4\n"
		mkfs.ext4 ${disk}3 -F -L backup
		printf "[${board}] Formatting ${disk}4 as ext4\n"
		mkfs.ext4 ${disk}4 -F -L data
		;;
	*)
		;;
esac

sync

printf "[${board}] Done.\n"
