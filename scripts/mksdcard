#!/bin/bash

if ! [ "`id -u`" = "0" ]; then
	printf "***** THIS MUST BE RUN AS 'root' USER *****\n"
	exit 1
fi

function usage()
{
	printf "USAGE: mksdcard <board> <block-device>\n"
}

if [ "${1}" = "" ]; then
	printf "***** MISSING BOARD NAME *****\n"
	usage
	exit 1
fi

board=$1

case "${board}" in
*visionfive2*)
	printf "***** StarFive5 RISCV 64-bit *****\n"
	;;
*ls1043ardb*)
	printf "***** LXP Layerscape ARM Cortex-A53 *****\n"
	;;
*aml-s905x-cc*)
	printf "***** Amlogic ARM Cortex-A53 *****\n"
	;;
*pynq-z2*)
	printf "***** Xilinx Zynq ARM Cortex-A9 *****\n"
	;;
*sama5d3*)
	printf "***** SAMA5D3 ARM Cortex-A5 *****\n"
	;;
*am335x*|*am3517*|*beagle*|*omap3*)
	printf "***** OMAP3 ARM Cortex-A8 *****\n"
	;;
*k3*)
	printf "***** TI K3 Multicore SoC *****\n"
	;;
*)
	printf "***** INVALID BOARD NAME *****\n"
	usage
	exit 1
	;;
esac

if [ "${2}" = "" ]; then
	printf "***** MISSING SDCARD DEVICE PATH *****\n"
	usage
	exit 1
fi

disk=$2

controller="unknown"

echo ${disk} | grep -q "/dev/mmcblk"
if [ "$?" = "0" ]; then
	controller=MMC
	partition="p"
fi

echo ${disk} | grep -q "/dev/sd"
if [ "$?" = "0" ]; then
	controller=ATA
fi

if [ "${controller}" = "unknown" ]; then
	printf "***** DISK ${disk} IS NOT SUPPORTED *****\n"
	exit 1
fi

if ! [ -b "${disk}" ]; then
	printf "***** DISK ${disk} IS NOT A BLOCK DEVICE *****\n"
	exit 1
fi

mount | grep -q ${disk}
if [ "$?" = "0" ]; then
	printf "***** DISK ${disk} HAS ACTIVE MOUNT POINT *****\n"
	exit 1
fi

disk_sz="`blockdev --getsize64 ${disk}`"

printf "[${board}] ${disk} is $((${disk_sz} / 1000000000)) GB\n"

if [[ ${disk_sz} -lt 7000000000 ]]; then
	printf "***** DISK SIZE LESS THAN 7 GB IS NOT SUPPORTED *****\n"
	exit 1
fi

printf "[${board}] ALL DATA ON ${disk} WILL BE LOST. Are you sure? (yes or no) : "
read proceed

if ! [ "${proceed}" = "yes" ]; then
	exit 1
fi

for ((i=3; i > 0; i--)); do
	printf "\r[${board}] Starting in %2d ... \t\t[Ctrl-C to abort]" $i
	sleep 1
done

echo

printf "[${board}] Preparing ${controller} @ ${disk}\n"

# Clear MBR/GPT data from disk
dd if=/dev/zero of=${disk} bs=512 count=34
dd if=/dev/zero of=${disk} bs=512 count=34 seek=$((`blockdev --getsz ${disk}` - 34))
if [ -n "$(which wipefs)" ]; then
	wipefs --all ${disk}
fi

# NOTE: use higher quality SD/MMC cards (Class 10, UHS-1 or better)
#
# TYPICAL MEDIA SIZE: 16 GiB+
# +----------+------------+----------+----------+
# | RAW      | (1) FAT 32 | (2) EXT4 | (3) EXT4 |
# +----------+------------+----------+----------+
# | FIRMWARE | BOOT       | rootfs   | data     |
# +----------+------------+----------+----------+
# | 68 MiB   | 550 MiB    | 4000 MiB | (fill)   |
# +----------+------------+----------+----------+
#
# Filesystem 1K-blocks Used  Available Use% Mounted on
# /dev/sdX1     562080    4     562076   1% /media/BOOT
# /dev/sdX2    3950176   24    3892808   1% /media/rootfs
# /dev/sdX3   10596592   24   10471448   1% /media/data
# 
# https://en.wikipedia.org/wiki/GUID_Partition_Table#Partition_type_GUIDs
# http://www.rodsbooks.com/linux-uefi/
#
# [ RISC-V ]
# - U-Boot SPL       : 2E54B353-1271-4842-806F-E436D6AF6985
# - U-Boot FIT Image : BC13C2FF-59E6-4262-A352-B275FD6F7172
# - Filesystem Image : EBD0A0A2-B9E5-4433-87C0-68B6B72699C7
#
# [ GENERAL Linux ]
# - Filesystem Image : 0FC63DAF-8483-4772-8E79-3D69D8477DE4
#

case "${board}" in
*visionfive2*)
	printf "[${board}] Partitioning ${disk} [ 64 MiB RAW / 2 MiB (spl) / 2 MiB (uboot) / 550 MiB (BOOT) / 4 GiB (rootfs) / <fill> (data) ]\n"
	boot="3"
	rootfs="4"
	data="5"
	sgdisk --clear \
		--set-alignment=2 \
		--new=1:64M:+2M --change-name=1:spl --typecode=1:2E54B353-1271-4842-806F-E436D6AF6985 \
		--new=2::+2M --change-name=2:uboot --typecode=2:BC13C2FF-59E6-4262-A352-B275FD6F7172 \
		--new=3::+550M --change-name=3:BOOT --typecode=3:BC13C2FF-59E6-4262-A352-B275FD6F7172 \
		--new=4::+4000M --change-name=4:rootfs --typecode=4:EBD0A0A2-B9E5-4433-87C0-68B6B72699C7 \
		--new=5::0 --change-name=5:data --typecode=5:0FC63DAF-8483-4772-8E79-3D69D8477DE4 \
		${disk}
	sgdisk -g ${disk}
	partprobe -s ${disk}
	parted -a optimal -s ${disk} set 3 boot on
	;;
*)
	printf "[${board}] Partitioning ${disk} [ 68 MiB RAW / 550 MiB (BOOT) / 4 GiB (rootfs) / <fill> (data) ]\n"
	boot="1"
	rootfs="2"
	data="3"
	parted -a optimal -s ${disk} mklabel msdos && partprobe -s ${disk}
	parted -a optimal -s ${disk} mkpart primary fat32 68MiB 618MiB && partprobe -s ${disk}
	parted -a optimal -s ${disk} mkpart primary ext4 618MiB 4618MiB && partprobe -s ${disk}
	parted -a optimal -s ${disk} mkpart primary ext4 4618MiB 100% && partprobe -s ${disk}
	parted -a optimal -s ${disk} set 1 boot on
	;;
esac

printf "[${board}] Formatting ${disk}${partition}${boot} as vfat\n"
mkfs.vfat -F 32 ${disk}${partition}${boot} -n BOOT
printf "[${board}] Formatting ${disk}${partition}${rootfs} as ext4\n"
mkfs.ext4 ${disk}${partition}${rootfs} -F -m 1 -L rootfs
printf "[${board}] Formatting ${disk}${partition}${data} as ext4\n"
mkfs.ext4 ${disk}${partition}${data} -F -m 1 -L data

sync

printf "[${board}] Done.\n"
