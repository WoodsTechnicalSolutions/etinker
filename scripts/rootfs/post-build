#!/bin/bash

TARGET=$1

rsync_opts="-rlptgDP"

printf "\n***** [${ET_BOARD}][${ET_BOARD_TYPE}] post-build script *****\n\n"

# Preserve target directory
if [ -d ${TARGET}-bare ]; then
	printf "***** [${ET_BOARD}][${ET_BOARD_TYPE}] restoring clean target directory *****\n\n"
	rm -rf ${TARGET}
	cp -a ${TARGET}-bare ${TARGET}
else
	cp -a ${TARGET} ${TARGET}-bare
fi

# Update target file system
mkdir -p ${TARGET}/usr/lib/firmware
# Copy common files to target
rsync ${rsync_opts} ${ET_DIR}/common/rootfs/* ${TARGET}/ 2>/dev/null
cp -fv ${ET_DIR}/scripts/mksdcard ${TARGET}/usr/sbin/ 2>/dev/null
# Copy board specific files to target
if [ -d ${ET_DIR}/boards/${ET_BOARD}/rootfs ]; then
	rsync ${rsync_opts} ${ET_DIR}/boards/${ET_BOARD}/rootfs/* ${TARGET}/ 2>/dev/null
fi
if [ -d ${ET_TOOLCHAIN_DIR}/${ET_CROSS_TUPLE}/sysroot/lib ]; then
	rsync ${rsync_opts} ${ET_TOOLCHAIN_DIR}/${ET_CROSS_TUPLE}/sysroot/lib/libBrokenLocale.so* ${TARGET}/lib/ 2>/dev/null
	rsync ${rsync_opts} ${ET_TOOLCHAIN_DIR}/${ET_CROSS_TUPLE}/sysroot/lib/libnss_*.so* ${TARGET}/lib/ 2>/dev/null
	rsync ${rsync_opts} ${ET_TOOLCHAIN_DIR}/${ET_CROSS_TUPLE}/sysroot/lib/libstdc++.so* ${TARGET}/lib/ 2>/dev/null
	rsync ${rsync_opts} ${ET_TOOLCHAIN_DIR}/${ET_CROSS_TUPLE}/sysroot/lib/libgcc_s.so* ${TARGET}/lib/ 2>/dev/null
	rsync ${rsync_opts} ${ET_TOOLCHAIN_DIR}/${ET_CROSS_TUPLE}/sysroot/lib/libatomic.so* ${TARGET}/lib/ 2>/dev/null
	rsync ${rsync_opts} ${ET_TOOLCHAIN_DIR}/${ET_CROSS_TUPLE}/sysroot/lib/libssp.so* ${TARGET}/lib/ 2>/dev/null
	rsync ${rsync_opts} ${ET_TOOLCHAIN_DIR}/${ET_CROSS_TUPLE}/sysroot/lib/libSegFault.so ${TARGET}/lib/ 2>/dev/null
	rsync ${rsync_opts} ${ET_TOOLCHAIN_DIR}/${ET_CROSS_TUPLE}/sysroot/lib/libmemusage.so ${TARGET}/lib/ 2>/dev/null
	rsync ${rsync_opts} ${ET_TOOLCHAIN_DIR}/${ET_CROSS_TUPLE}/sysroot/lib/libpcprofile.so ${TARGET}/lib/ 2>/dev/null
	rsync ${rsync_opts} ${ET_TOOLCHAIN_DIR}/${ET_CROSS_TUPLE}/sysroot/lib/libitm.so* ${TARGET}/lib/ 2>/dev/null
fi
if [ -d ${ET_TOOLCHAIN_DIR}/${ET_CROSS_TUPLE}/debug-root ]; then
	rsync ${rsync_opts} ${ET_TOOLCHAIN_DIR}/${ET_CROSS_TUPLE}/debug-root/* ${TARGET}/ 2>/dev/null
fi
if [ -d ${ET_KERNEL_DIR}/boot ]; then
	rsync ${rsync_opts} ${ET_KERNEL_DIR}/boot ${TARGET}/ 2>/dev/null
	rsync ${rsync_opts} ${ET_KERNEL_DIR}/usr ${TARGET}/ 2>/dev/null
fi
if [ -d ${ET_BOOTLOADER_DIR}/boot ]; then
	rsync ${rsync_opts} ${ET_BOOTLOADER_DIR}/* ${TARGET}/ 2>/dev/null
fi
if [ -d ${ET_OVERLAY_DIR} ] && [ -f ${ET_OVERLAY_DIR}/exclude ]; then
	rsync ${rsync_opts} --exclude-from=${ET_OVERLAY_DIR}/exclude \
		${ET_OVERLAY_DIR}/ \
		${TARGET}/ 2>/dev/null
fi
printf "\n%s\n\n" "`cat ${TARGET}/etc/issue`" > ${TARGET}/etc/issue
if [ -f ${TARGET}/etc/inittab ]; then
	printf "\n::sysinit:/bin/mount -t tracefs nodev /sys/kernel/tracing\n" >> ${TARGET}/etc/inittab
	printf "\n::sysinit:/bin/mount -t debugfs none /sys/kernel/debug\n" >> ${TARGET}/etc/inittab
	printf "\n::sysinit:/bin/mount -t configfs none /sys/kernel/config\n" >> ${TARGET}/etc/inittab
	printf "\n::sysinit:/bin/mkdir -p /var/lib/nfs/v4recovery\n" >> ${TARGET}/etc/inittab
	sed -i s,::sysinit:/etc/init.d/rcS,#::sysinit:/etc/init.d/rcS, ${TARGET}/etc/inittab
	sed -i s,${ET_ROOTFS_GETTY_PORT}::respawn:,#${ET_ROOTFS_GETTY_PORT}::respawn:, ${TARGET}/etc/inittab
	printf "\n::sysinit:/etc/init.d/rcS\n" >> ${TARGET}/etc/inittab
	printf "\n${ET_ROOTFS_GETTY_PORT}::respawn:/sbin/getty -L ${ET_ROOTFS_GETTY_PORT} 115200 screen-256color\n" >> ${TARGET}/etc/inittab
fi
sed -i s,ET_ROOTFS_GETTY_PORT,${ET_ROOTFS_GETTY_PORT}, ${TARGET}/etc/profile.d/tty.sh
# Google DNS
rm -f ${TARGET}/etc/resolv.conf
printf "nameserver 8.8.8.8\n"  > ${TARGET}/etc/resolv.conf
printf "nameserver 8.8.4.4\n" >> ${TARGET}/etc/resolv.conf

# Board Specific Modifications
case "${ET_BOARD_TYPE}" in
omap2plus|sama5|zynq|meson|layerscape|k3|starfive)
	printf "\n***** [${ET_BOARD}][${ET_BOARD_TYPE}] custom modifications *****\n\n"
	# Board Common
	mkdir -p ${TARGET}/media/BOOT
	mkdir -p ${TARGET}/media/rootfs
	mkdir -p ${TARGET}/media/data
	sed -i s,ext2,auto, ${TARGET}/etc/fstab
	echo "${ET_ROOTFS_GETTY_PORT}" > ${TARGET}/etc/securetty
	# mmc0 is the SD/MMC card
	printf "/dev/mmcblk0p1 /media/BOOT auto defaults 0 0\n" >> ${TARGET}/etc/fstab
	printf "/dev/mmcblk0p2 /media/rootfs auto defaults 0 0\n" >> ${TARGET}/etc/fstab
	printf "/dev/mmcblk0p3 /media/data auto defaults 0 0\n" >> ${TARGET}/etc/fstab
	# Board Firmware
	case "${ET_BOARD}" in
	am335x-*)
		rsync ${rsync_opts} ${ET_DIR}/firmware/am335x* ${TARGET}/usr/lib/firmware/
		;;
	k3-j721e-sk*)
		# mmc1 is the SD/MMC card
		sed -i s,mmcblk0,mmcblk1, ${TARGET}/etc/fstab
		;;
	aml-s905x-cc*)
		# My boards use both the 32 GiB eMMC and SD/MMC card
		sed -i s,\#\/dev\/mmc,\/dev\/mmc, ${TARGET}/etc/fstab
		# mmc1 is the eMMC chip
		sed -i s,mmcblk0,mmcblk1, ${TARGET}/etc/fstab
		# mount points for SD/MMC card
		mkdir -p ${TARGET}/media/mmcblk0p1
		mkdir -p ${TARGET}/media/mmcblk0p2
		mkdir -p ${TARGET}/media/mmcblk0p3
		printf "/dev/mmcblk0p1 /media/mmcblk0p1 auto defaults,noauto 0 0\n" >> ${TARGET}/etc/fstab
		printf "/dev/mmcblk0p2 /media/mmcblk0p2 auto defaults,noauto 0 0\n" >> ${TARGET}/etc/fstab
		printf "/dev/mmcblk0p3 /media/mmcblk0p3 auto defaults,noauto 0 0\n" >> ${TARGET}/etc/fstab
		# Build '/usr/sbin/firmware-update' file for on-target updates of SD and eMMC
		printf "#!/bin/bash\n" > ${TARGET}/usr/sbin/firmware-update
		printf "sync\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "if [ -b /dev/mmcblk0 ]; then\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "dd if=/media/BOOT/gxl-boot.bin of=/dev/mmcblk0 bs=512 seek=1\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "sync\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "fi\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "if [ -b /dev/mmcblk1 ]; then\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "dd if=/media/BOOT/gxl-boot.bin of=/dev/mmcblk1 bs=512 seek=1\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "sync\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "fi\n" >> ${TARGET}/usr/sbin/firmware-update
		chmod +x ${TARGET}/usr/sbin/firmware-update
		;;
	ls1043ardb*)
		# nvme0n1 is a NVMe memory attached to the Mini-PCIe connector
		# [1] https://www.amazon.com/Sintech-NGFF-nVME-Adapter-Cable/dp/B07DZ8SB8X [Sintech M.2 SSD to Mini PCIe adapter]
		# [2] https://www.amazon.com/gp/product/B06XSXX3NS [MEMPEK1W032GAXT]
		mkdir -p ${TARGET}/media/nvme
		printf "#/dev/nvme0n1p1 /media/nvme auto defaults 0 0\n" >> ${TARGET}/etc/fstab
		# Build '/usr/sbin/firmware-update' file for on-target updates of SD
		printf "#!/bin/bash\n" > ${TARGET}/usr/sbin/firmware-update
		printf "sync\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "if [ -f /media/BOOT/firmware.img ]; then\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "  dd if=/dev/zero of=/dev/mmcblk0 conv=fsync,notrunc bs=512 seek=8 count=8192\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "  dd if=/media/BOOT/firmware.img of=/dev/mmcblk0 conv=fsync,notrunc bs=512 seek=8\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "fi\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "sync\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "dd if=/media/BOOT/bl2_sd.pbl of=/dev/mmcblk0 conv=fsync,notrunc bs=512 seek=8\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "dd if=/media/BOOT/fip.bin of=/dev/mmcblk0 conv=fsync,notrunc bs=512 seek=2048\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "sync\n" >> ${TARGET}/usr/sbin/firmware-update
		chmod +x ${TARGET}/usr/sbin/firmware-update
		;;
	visionfive2*)
		# Build '/usr/sbin/firmware-update' file for on-target updates of SD
		printf "#!/bin/bash\n" > ${TARGET}/usr/sbin/firmware-update
		printf "sync\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "if [ -f /media/BOOT/u-boot-spl.bin.normal.out ] && [ -c /dev/mmcblk0p1 ]; then\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "  dd if=/media/BOOT/u-boot-spl.bin.normal.out of=/dev/mmcblk0p1 conv=fsync,notrunc\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "fi\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "sync\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "if [ -f /media/BOOT/u-boot.itb ] && [ -c /dev/mmcblk0p2 ]; then\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "  dd if=/media/BOOT/u-boot.itb of=/dev/mmcblk0p2 conv=fsync,notrunc\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "fi\n" >> ${TARGET}/usr/sbin/firmware-update
		printf "sync\n" >> ${TARGET}/usr/sbin/firmware-update
		chmod +x ${TARGET}/usr/sbin/firmware-update
		;;
	*)
		# DEFAULT NO-OP
		;;
	esac
	# Boards capable of using UBI on NAND
	case "${ET_BOARD}" in
	am3517-evm|omap3-beagle|omap3-evm*|sama5d3-xpld*|ls1043ardb*)
		mkdir -p ${TARGET}/media/ubifs
		printf "#ubi0:rootfs /media/ubifs ubifs defaults 0 0\n" >> ${TARGET}/etc/fstab
		;;
	*)
		# DEFAULT NO-OP
		;;
	esac
	# Boards with larger, and different, user-space
	case "${ET_BOARD_TYPE}" in
	meson|layerscape|k3)
		sed -i s,\#PermitRootLogin\ prohibit-password,PermitRootLogin\ yes, ${TARGET}/etc/ssh/sshd_config
		mv ${TARGET}/etc/modprobe.d/usbcdc.sh ${TARGET}/etc/modprobe.d/_usbcdc.sh_
		;;
	*)
		# DEFAULT NO-OP
		;;
	esac
	# Last Fixup
	case "${ET_BOARD}" in
	am335x-*|am3517-evm*|omap3-beagle*|omap3-evm*)
		if [ -f ${TARGET}/etc/inittab ]; then
			printf "\nttyGS0::respawn:/sbin/getty -L ttyGS0 115200 screen-256color\n" >> ${TARGET}/etc/inittab
		fi
		echo "ttyGS0" >> ${TARGET}/etc/securetty
		;;
	ls1012afrdm*)
		sed -i s,\/dev\/mmc,\#\/dev\/mmc, ${TARGET}/etc/fstab
		;;
	visionfive2*)
		${ET_SCRIPTS_DIR}/rootfs/${ET_ARCH}/fix-target-libs ${TARGET}
		;;
	*)
		# DEFAULT NO-OP
		;;
	esac
	;;
*)
	# DEFAULT NO-OP
	;;
esac

if [ -n "${ET_CUSTOM_DIR}" ] && [ -d ${ET_CUSTOM_DIR} ]; then
	rsync ${rsync_opts} ${ET_CUSTOM_DIR}/* ${TARGET}/ 2>/dev/null
fi

if [ "${ET_INITRAMFS}" = "yes" ] || \
		[ "${ET_VARIANT}" = "-initramfs" ] || \
		[ "${ET_ROOTFS_VARIANT}" = "-initramfs" ]; then
	# reduce size of rootfs.cpio
	rm -rf ${TARGET}/boot
	rm -f ${TARGET}/usr/lib/lib*.a
	sed -i s,\/dev\/mmc,\#\/dev\/mmc, ${TARGET}/etc/fstab
fi
