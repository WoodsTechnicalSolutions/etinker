#!/bin/bash
#

usage()
{
	printf "USAGE: sync <target> <destination>\n"
	printf "       sync <bootloader|kernel|rootfs|overlay> mmc\n"
	printf "       sync <bootloader|kernel|rootfs>         net:<ipv4-address>\n"
}

if ! [ -n "${2}" ]; then
	printf "Missing sync destination!\n"
	usage
	exit 1
fi

destination=${2}

if ! [ -n "${1}" ]; then
	printf "Missing sync build target!\n"
	usage
	exit 1
fi

target=${1}

case "${target}" in
	bootloader)
		target_dir="${ET_BOOTLOADER_DIR}"
		;;
	kernel)
		target_dir="${ET_KERNEL_DIR}"
		;;
	overlay)
		target_dir="${ET_OVERLAY_DIR}"
		;;
	rootfs)
		target_dir="${ET_ROOTFS_DIR}"
		;;
	*)
		printf "Unsupported build target! [%s]\n" ${target}
		exit 1
		;;
esac

if ! [ -d ${target_dir} ]; then
	printf "Target directory does not exist! [%s]\n" ${target_dir}
	usage
	exit 1
fi

case "${destination}" in
	mmc)
		if [ -d /media/$USER ]; then
			# Ubuntu media location
			media="/media/$USER"
		else
			if [ -d /run/media/$USER ]; then
				# Arch Linux media location
				media="/run/media/$USER"
			else
				printf "Unknown SD/MMC media directory location!\n"
				exit 1
			fi
		fi
		if ! [ -d ${media}/rootfs ]; then
			printf "Unmounted media directory! [%s/rootfs]\n" ${media}
			exit 1
		fi
		case "${target}" in
			kernel|bootloader)
				if ! [ -d ${media}/BOOT ]; then
					printf "Unmounted media directory! [%s/BOOT]\n" ${media}
					exit 1
				fi
				sudo mkdir -p ${media}/rootfs/lib/firmware
				sudo rsync -aP ${target_dir}/* ${media}/rootfs/ && sync
				if [ "${target}" = "kernel" ]; then
					sudo rsync -aP  ${target_dir}/../../../firmware/* ${media}/rootfs/lib/firmware/ && sync
				fi
				sudo rsync -P  ${target_dir}/boot/* ${media}/BOOT/ && sync
				if [ "`printf ${ET_BOARD_TYPE}|grep -Po meson`" = "meson" ]; then
					blkdev="`df ${media}/BOOT | tail -1 | cut -d ' ' -f 1 | cut -d 1 -f 1 | tr -d \\n`"
					printf "\n*** 'dd' ${ET_BOOTLOADER_DIR}/boot/u-boot.bin.sd.bin -> ${blkdev} ***\n\n"
					sudo dd if=${ET_BOOTLOADER_DIR}/boot/u-boot.bin.sd.bin of=${blkdev} conv=fsync,notrunc bs=1 count=444
					sudo dd if=${ET_BOOTLOADER_DIR}/boot/u-boot.bin.sd.bin of=${blkdev} conv=fsync,notrunc bs=512 skip=1 seek=1
				fi
				;;
			overlay)
				sudo rsync --exclude-from=${target_dir}/exclude \
					-aP ${target_dir}/* \
					${media}/rootfs/ && sync
				;;
			rootfs)
				sudo tar -xf ${target_dir}/images/rootfs.tar -C ${media}/rootfs/ && sync
				;;
			*)
				printf "Target '%s' is unsupported for '%s'!\n" ${target} ${destination}
				exit 1
				;;
		esac
		;;
	net:*)
		ipv4="`printf ${destination} | cut -d ':' -f 2`"
		case "${target}" in
			kernel|bootloader)
				rsync -e 'ssh -o LogLevel=quiet -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' \
					-aP ${target_dir}/* \
					root@${ipv4}:/
				if [ "${target}" = "kernel" ]; then
					rsync -e 'ssh -o LogLevel=quiet -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' \
						-aP ${target_dir}/../../../firmware/* \
						root@${ipv4}:/lib/firmware/
				fi
				rsync -e 'ssh -o LogLevel=quiet -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' \
					-P ${target_dir}/boot/* \
					root@${ipv4}:/media/BOOT/
				;;
			overlay)
				rsync -e 'ssh -o LogLevel=quiet -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' \
					--exclude-from=${target_dir}/exclude \
					-aP ${target_dir}/* \
					root@${ipv4}:/
				;;
			rootfs)
				rsync -e 'ssh -o LogLevel=quiet -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' \
					-aP ${target_dir}/images/rootfs.tar \
					root@${ipv4}:
				rsync -e 'ssh -o LogLevel=quiet -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' \
					-aP ${target_dir}/../../../common/rootfs/* \
					root@${ipv4}:/
				;;
			*)
				printf "Target '%s' is unsupported for '%s'!\n" ${target} ${destination}
				exit 1
				;;
		esac
		;;
	*)
		printf "Sync destination [%s] not implemented!\n" ${destination}
		usage
		exit 1
esac
