#!/bin/bash
#

rsync_opts="-rptDP"
rsync_opts_x="-rlptDP"

usage()
{
	printf "USAGE: sync <target> <destination>\n"
	printf "       sync <bootloader|kernel|library|rootfs|overlay> mmc\n"
	printf "       sync <bootloader|kernel|library|rootfs|overlay> net:<ipv4/hostname>\n"
}

wait_on_sync()
{
	printf "[%s][%s] waiting on %s filesystem 'sync' ... " $1 $2 $3
	sudo sync
	printf "[done]\n"
}

echo

if ! [ -n "${2}" ]; then
	printf "Missing sync destination!\n"
	usage
	exit 1
fi

destination=${2}

if ! [ -n "${1}" ]; then
	printf "Missing sync build target!\n"
	usage
	exit 1
fi

target=${1}

case "${target}" in
	bootloader)
		target_dir="${ET_BOOTLOADER_DIR}"
		;;
	kernel)
		target_dir="${ET_KERNEL_DIR}"
		;;
	library)
		target_dir="${ET_LIBRARY_DIR}"
		;;
	overlay)
		target_dir="${ET_OVERLAY_DIR}"
		;;
	rootfs)
		target_dir="${ET_ROOTFS_DIR}"
		;;
	*)
		printf "Unsupported build target! [%s]\n" ${target}
		exit 1
		;;
esac

if ! [ -d ${target_dir} ]; then
	printf "Target directory does not exist! [%s]\n" ${target_dir}
	usage
	exit 1
fi

if [ -z "${ET_IFACE}" ]; then
	net_if="`ip route | grep -m 1 default | cut -d ' ' -f 5`"
else
	net_if="${ET_IFACE}"
fi
net_addr="`ip addr show ${net_if} | grep 'inet ' | cut -d '/' -f 1 | cut -d ' ' -f 6`"

printf "[%s][%s] Synching to %s has started.\n" ${ET_BOARD} ${target} ${destination}

case "${destination}" in
	mmc)
		if [ -d /media/$USER ]; then
			# Ubuntu media location
			media="/media/$USER"
		else
			if [ -d /run/media/$USER ]; then
				# Arch Linux media location
				media="/run/media/$USER"
			else
				printf "Unknown SD/MMC media directory location!\n"
				exit 1
			fi
		fi
		if ! [ -d ${media}/rootfs ]; then
			printf "Unmounted media directory! [%s/rootfs]\n" ${media}
			exit 1
		fi
		printf "[%s][%s] populating %s data.\n" ${ET_BOARD} ${target} ${destination}
		case "${target}" in
			kernel|bootloader)
				if ! [ -d ${media}/BOOT ]; then
					printf "Unmounted media directory! [%s/BOOT]\n" ${media}
					exit 1
				fi
				sudo rsync ${rsync_opts_x} ${target_dir}/boot ${media}/rootfs/
				if [ "${target}" = "kernel" ]; then
					sudo rsync ${rsync_opts_x} ${target_dir}/lib/modules ${media}/rootfs/usr/lib/
					sudo rsync ${rsync_opts_x} ${ET_DIR}/firmware ${media}/rootfs/usr/lib/
				fi
				rm -f ${media}/BOOT/firmware.img
				sudo rsync ${rsync_opts} ${target_dir}/boot/* ${media}/BOOT/

				if [ "${target}" = "bootloader" ]; then
					printf "[%s][%s] if required, write raw %s data.\n" ${ET_BOARD} ${target} ${destination}

					blkdev="`df ${media}/BOOT | tail -1 | cut -d ' ' -f 1 | cut -d 1 -f 1 | tr -d \\n`"
					case "${ET_BOARD_TYPE}" in
						meson)
							printf "\n*** write ${ET_BOOTLOADER_DIR}/boot/gxl-boot.bin to ${blkdev} ***\n\n"
							sudo dd if=${ET_BOOTLOADER_DIR}/boot/gxl-boot.bin of=${blkdev} conv=fsync,notrunc bs=512 seek=1
							;;
						layerscape)
							if [ -f ${LSDK_FIRMWARE_BIN} ]; then
								# load LSDK firmware
								printf "\n*** write ${LSDK_VERSION} firmware image to ${blkdev} @ 8 block offset ***\n\n"
								sudo dd if=${LSDK_FIRMWARE_BIN} of=${blkdev} conv=fsync,notrunc bs=512 seek=8
								sync
								printf "\n*** write BL2 image to ${blkdev} @ 8 block offset ***\n\n"
								sudo dd if=${ET_BOOTLOADER_DIR}/boot/bl2_sd.pbl of=${blkdev} conv=fsync,notrunc bs=512 seek=8
								printf "\n*** write FIP image to ${blkdev} @ 2048 block offset ***\n\n"
								sudo dd if=${ET_BOOTLOADER_DIR}/boot/fip.bin of=${blkdev} conv=fsync,notrunc bs=512 seek=2048
							else
								printf "\nMissing ${LSDK_VERSION} Firmware Image! [ ${LSDK_FIRMWARE_BIN} ]\n\n"
							fi
							;;
						*)
							# NOOP
							;;
					esac
				fi
				;;
			library)
				sudo rsync ${rsync_opts_x} ${target_dir}/* ${media}/rootfs/
				;;
			overlay)
				sudo rsync --exclude-from=${ET_OVERLAY_DIR}/exclude \
					${rsync_opts_x} ${target_dir}/* \
					${media}/rootfs/
				;;
			rootfs)
				if [ -n "`ls ${media}/rootfs/`" ]; then
					if ! [ "`ls ${media}/rootfs/`" = "lost+found" ]; then
						printf "non-empty rootfs detected! [ ${media}/rootfs ]\n"
						exit 1
					fi
				fi
				sudo tar -xf ${target_dir}/images/rootfs.tar -C ${media}/rootfs/
				sudo cp ${target_dir}/images/rootfs.tar ${media}/data/
				;;
			*)
				printf "Target '%s' is unsupported for '%s'!\n" ${target} ${destination}
				exit 1
				;;
		esac
		wait_on_sync ${ET_BOARD} ${target} ${destination}
		;;
	net:*)
		ipv4="`printf ${destination} | cut -d ':' -f 2`"
		printf "[%s][%s] Using %s [%s] -> %s\n" ${ET_BOARD} ${target} ${net_if} ${net_addr} ${ipv4}
		case "${target}" in
			kernel|bootloader)
				printf "[%s][%s] Completing transfer to '/' on %s ... " ${ET_BOARD} ${target} ${ipv4}
				(cd ${target_dir} && \
					fakeroot tar --exclude='boot/extlinux' -cf - * | \
					ssh -o BindAddress=${net_addr} -o LogLevel=quiet -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
						root@${ipv4} \
						'( cd / && tar xf - && sync )')
				printf "Done\n"
				if [ "${target}" = "kernel" ] && [ "${ET_BOARD_TYPE}" = "omap2plus" ]; then
					printf "[%s][%s] Completing transfer to '/usr/lib/firmware/' on %s ... " ${ET_BOARD} ${target} ${ipv4}
					(cd ${ET_DIR}/firmware && \
						fakeroot tar -cf - * | \
						ssh -o BindAddress=${net_addr} -o LogLevel=quiet -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
							root@${ipv4} \
							'( cd /usr/lib/firmware/ && tar xf - && sync )')
					printf "Done\n"
				fi
				printf "[%s][%s] Completing transfer to '/media/BOOT/' on %s ... " ${ET_BOARD} ${target} ${ipv4}
				(cd ${target_dir}/boot && \
					fakeroot tar --exclude='extlinux' -cf - * | \
					ssh -o BindAddress=${net_addr} -o LogLevel=quiet -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
						root@${ipv4} \
						'( cd /media/BOOT/ && tar xf - && sync )')
				printf "Done\n"
				;;
			library)
				printf "[%s][%s] Completing transfer to '/' on %s ... " ${ET_BOARD} ${target} ${ipv4}
				(cd ${target_dir} && \
					fakeroot tar --exclude='*.a' --exclude='usr/include' -cf - * | \
					ssh -o BindAddress=${net_addr} -o LogLevel=quiet -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
						root@${ipv4} \
						'( cd / && tar xf - && sync )')
				printf "Done\n"
				;;
			overlay)
				printf "[%s][%s] Completing transfer to '/' on %s ... " ${ET_BOARD} ${target} ${ipv4}
				(cd ${target_dir} && \
					fakeroot tar --exclude-from=${target_dir}/exclude -cf - * | \
					ssh -o BindAddress=${net_addr} -o LogLevel=quiet -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
						root@${ipv4} \
						'( cd / && tar xf - && sync )')
				printf "Done\n"
				rm -rf /tmp/overlay
				;;
			rootfs)
				printf "[%s][%s] Completing transfer to '/media/data/' on %s ... " ${ET_BOARD} ${target} ${ipv4}
				scp -pq -o BindAddress=${net_addr} -o LogLevel=quiet -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
					${target_dir}/images/rootfs.tar \
					root@${ipv4}:/media/data/
				printf "Done\n"
				;;
			*)
				printf "Target '%s' is unsupported for '%s'!\n" ${target} ${destination}
				exit 1
				;;
		esac
		;;
	*)
		printf "Sync destination [%s] not implemented!\n" ${destination}
		usage
		exit 1
esac

printf "[%s][%s] Synching to %s has completed.\n" ${ET_BOARD} ${target} ${destination}

echo
