#!/bin/bash
#
# This script ONLY used when bumping the U-Boot versions
#

ET_DIR="`realpath -e $(dirname $0)/..`"

usage ()
{
	printf "\nusage: bootloader-bump <command>\n\n"
	printf "<command>\n"
	printf "\tmake <target> - Direct make target\n"
	printf "\tbuild         - Purge and Build\n"
	printf "\tupdate        - Clean and Build\n"
	printf "\t*config       - {g,menu,n,old}config\n\n"
}

do_make ()
{
	printf "\n[$1]\n"
	case $2 in
	make)
		ET_BOARD=$1 make bootloader-$3
		;;
	*config | update)
		ET_BOARD=$1 make bootloader-$2
		;;
	build)
		time ET_BOARD=$1 make bootloader-purge bootloader
		;;
	*)
		;;
	esac
}

is_virtual ()
{
	if [ "`grep -Po -e 'is virtual' ${ET_DIR}/boards/$1/etinker.mk 2> /dev/null`" = "is virtual" ]; then
		return 0
	else
		return 1
	fi
}

# verify first positional argument
if [ -e $1 ]; then
	printf "Missing arguments!\n"
	usage
	exit 1
fi

# validate first positional argument
case $1 in
make)
	if [ -e $2 ]; then
		printf "Missing 'make' arguments!\n"
		usage
		exit 1
	fi
	;;
*config | update | build)
	;;
*)
	printf "Invalid argument list!\n"
	usage
	exit 1
	;;
esac

# check state of boards directory
for n in `ls ${ET_DIR}/boards`; do
	if ! [ -f ${ET_DIR}/boards/$n/etinker.mk ]; then
		printf "'$n' is not a valid etinker board!\n" $n
		exit 1
	fi
done

# operate on valid virtual boards
for n in `ls ${ET_DIR}/boards`; do
	if ! is_virtual $n; then
		continue
	fi

	# select boards with U-Boot config
	for b in `ls ${ET_DIR}/boards/$n/config/`; do
		case $b in
		u-boot-*)
			board=`echo $b | grep -Po 'u-boot-\K[^\n]*'`
			if ! do_make $board "$@"; then
				printf "etinker $0 failed!\n"
				exit 1
			fi
			;;
		*)
			;;
		esac

	done
done
